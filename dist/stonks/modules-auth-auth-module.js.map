{"version":3,"sources":["./src/app/modules/auth/signup/signup.component.ts","./src/app/modules/auth/signup/signup.component.html","./src/app/modules/auth/auth.module.ts","./src/app/modules/auth/login/login.component.ts","./src/app/modules/auth/login/login.component.html","./src/app/modules/auth/auth.routes.ts","./src/app/modules/auth/mustMatch.validator.ts"],"names":[],"mappings":"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","file":"modules-auth-auth-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { environment } from '../../../../environments/environment';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { MustMatch } from '../mustMatch.validator';\n\n\n@Component({\n    selector: 'app-signup',\n    templateUrl: './signup.component.html',\n    styleUrls: ['./signup.component.scss'],\n})\nexport class SignupComponent implements OnInit {\n    form: FormGroup;\n    appName = environment.appName;\n\n    private formSubmitAttempt: boolean;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private authService: AuthService,\n    ) {}\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n                username: ['', Validators.required],\n                firstName: ['', Validators.required],\n                lastName: ['', Validators.required],\n                email: ['', [Validators.required, Validators.email]],\n                password: ['', Validators.required],\n                repeatPassword: ['', Validators.required],\n            }, {\n                validator: MustMatch('password', 'repeatPassword'),\n            },\n        );\n    }\n\n    isFieldInvalid(field: string) {\n        return (\n            (!this.form.get(field).valid && this.form.get(field).touched) ||\n            (this.form.get(field).untouched && this.formSubmitAttempt)\n        );\n    }\n\n    onSubmit() {\n        if (this.form.valid) {\n            this.authService.signup(this.form.value);\n        }\n        this.formSubmitAttempt = true;\n    }\n\n\n}\n","<mat-card class=\"signin-conten mat-elevation-z4\">\n    <mat-card-content>\n        <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n            <p>Signup to {{appName}}</p>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"username\" matInput placeholder=\"Username\" required>\n                <mat-error *ngIf=\"isFieldInvalid('username')\">\n                    Username is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"firstName\" matInput placeholder=\"First Name\" required>\n                <mat-error *ngIf=\"isFieldInvalid('firstName')\">\n                    First Name is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"lastName\" matInput placeholder=\"Last Name\" required>\n                <mat-error *ngIf=\"isFieldInvalid('lastName')\">\n                    Last Name is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"email\" matInput placeholder=\"Email\" required>\n                <mat-error *ngIf=\"isFieldInvalid('email')\">\n                    Email is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"password\" matInput placeholder=\"Password\" required type=\"password\">\n                <mat-error *ngIf=\"isFieldInvalid('password')\">\n                    Password is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"repeatPassword\" matInput placeholder=\"Repeat Password\" required type=\"password\">\n                <mat-error *ngIf=\"isFieldInvalid('repeatPassword')\">\n                    Password is invalid\n                </mat-error>\n            </mat-form-field>\n            <button color=\"primary\" mat-raised-button>Signup</button>\n        </form>\n    </mat-card-content>\n</mat-card>\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { RouterModule } from '@angular/router';\nimport { authRoutes } from './auth.routes';\n\n\n@NgModule({\n    declarations: [\n        LoginComponent,\n        SignupComponent,\n    ],\n    imports: [\n        RouterModule.forChild(authRoutes),\n        SharedModule,\n    ],\n})\nexport class AuthModule { }\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { environment } from '../../../../environments/environment';\n\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    appName = environment.appName;\n\n    private formSubmitAttempt: boolean;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private authService: AuthService,\n    ) {}\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required],\n        });\n    }\n\n    isFieldInvalid(field: string) {\n        return (\n            (!this.form.get(field).valid && this.form.get(field).touched) ||\n            (this.form.get(field).untouched && this.formSubmitAttempt)\n        );\n    }\n\n    onSubmit() {\n        if (this.form.valid) {\n            this.authService.login(this.form.value);\n        }\n        this.formSubmitAttempt = true;\n    }\n\n}\n","<mat-card class=\"signin-content mat-elevation-z4\">\n    <mat-card-content>\n        <form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n            <p>Login to {{appName}}</p>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"username\" matInput placeholder=\"Username\" required>\n                <mat-error *ngIf=\"isFieldInvalid('username')\">\n                    Username is invalid\n                </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width-input\">\n                <input formControlName=\"password\" matInput placeholder=\"Password\" required type=\"password\">\n                <mat-error *ngIf=\"isFieldInvalid('password')\">\n                    Password is invalid\n                </mat-error>\n            </mat-form-field>\n            <button color=\"primary\" mat-raised-button>Login</button>\n        </form>\n    </mat-card-content>\n</mat-card>\n","import { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { Routes } from '@angular/router';\n\n\nexport const authRoutes: Routes = [\n    { path: '', redirectTo: 'signup', pathMatch: 'full' },\n    { path: 'signup', component: SignupComponent },\n    { path: 'login', component: LoginComponent },\n];\n","import { FormGroup } from '@angular/forms';\n\n\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n        if (matchingControl.errors && !matchingControl.errors.confirmedValidator) {\n            return;\n        }\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ confirmedValidator: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    };\n}\n"],"sourceRoot":"webpack:///"}