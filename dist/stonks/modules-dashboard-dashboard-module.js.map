{"version":3,"sources":["./src/app/modules/dashboard/dashboard.component.ts","./src/app/modules/dashboard/dashboard.component.html","./src/app/modules/dashboard/dashboard.module.ts","./src/app/modules/dashboard/dashboard.routes.ts","./src/app/modules/dashboard/chart/chart.component.ts","./src/app/modules/dashboard/chart/chart.component.html","./src/app/modules/dashboard/dialog/dialog.component.ts","./src/app/modules/dashboard/dialog/dialog.component.html","./src/app/modules/dashboard/services/transaction.service.ts"],"names":[],"mappings":"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","file":"modules-dashboard-dashboard-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TransactionService } from './services/transaction.service';\nimport { Transaction } from '../../core/interfaces/transaction.interface';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogComponent } from './dialog/dialog.component';\n\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n\n    displayedColumns: string[] = [\n        'asset', 'amountCash', 'amountCrypto', 'date',\n        'current', 'profitloss', 'delete', 'graph',\n    ];\n    transactions: Transaction[] = [];\n    totalInvested = 0;\n    totalCurrentValue = 0;\n    lossProfit = 0;\n\n    constructor(private transactionService: TransactionService, public dialog: MatDialog) { }\n\n    async ngOnInit() {\n        await this.loadTransactions();\n        this.transactionService.shouldUpdate.subscribe(e => this.loadTransactions());\n    }\n\n    async loadTransactions() {\n        this.transactions = await this.transactionService.loadTransactions();\n        this.totalInvested = 0;\n        this.totalCurrentValue = 0;\n        this.lossProfit = 0;\n        this.transactions.forEach((i) => {\n                this.totalInvested += i.amountCash;\n                this.totalCurrentValue += i.currentValue;\n                this.lossProfit += i.currentValue - i.amountCash;\n            },\n        );\n    }\n\n    openAddDialog(): void {\n        this.dialog.open(DialogComponent, { width: '500px' });\n    }\n\n    async deleteTransaction(id: number) {\n        await this.transactionService.deleteTransaction(id);\n    }\n}\n\n","<div fxFlexFill class=\"content mat\" fxLayout=\"column\">\n\n    <mat-card class=\"total-card mat-elevation-z8\" fxLayout=\"row\">\n\n        <div class=\"total\">\n            <p>Total Invested:</p>\n            <h2>{{totalInvested}}</h2>\n        </div>\n\n        <div class=\"total\">\n            <p>Current Value:</p>\n            <h2>{{totalCurrentValue | round:2}}</h2>\n        </div>\n\n        <div class=\"total\">\n            <p>Profit/Loss:</p>\n            <h2>{{lossProfit |round:2}}</h2>\n        </div>\n\n    </mat-card>\n\n    <mat-card class=\"actions-panel mat-elevation-z8\" fxLayout=\"row\">\n\n        <button mat-raised-button color=\"primary\" (click)=\"openAddDialog()\">Add Transaction</button>\n\n    </mat-card>\n\n    <div *ngIf=\"transactions.length > 0\" fxFlex=\"1\">\n        <table mat-table [dataSource]=\"transactions\" class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"asset\">\n                <th mat-header-cell *matHeaderCellDef> Asset</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.asset}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amountCrypto\">\n                <th mat-header-cell *matHeaderCellDef> Amount Crypto</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.amountCrypto}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amountCash\">\n                <th mat-header-cell *matHeaderCellDef> Amount Currency </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.amountCash | round:2}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"date\">\n                <th mat-header-cell *matHeaderCellDef> Date </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.dateOfTransfer | date: \"YYYY-MM-dd\"}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"current\">\n                <th mat-header-cell *matHeaderCellDef> Current Value </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.currentValue | round:2}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"profitloss\">\n                <th mat-header-cell *matHeaderCellDef> Profit/Loss </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.profitLoss | round:2}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"delete\">\n                <th mat-header-cell *matHeaderCellDef> Profit/Loss </th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <button mat-mini-fab color=\"warn\" (click)=\"deleteTransaction(element.id)\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"graph\">\n                <th mat-header-cell *matHeaderCellDef> Graph</th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <app-chart [data]=\"element.timeSeries\" [labels]=\"element.timeStamp\"></app-chart>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n    </div>\n\n\n</div>\n\n\n\n\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DashboardComponent } from './dashboard.component';\nimport { RouterModule } from '@angular/router';\nimport { dashboardRoutes } from './dashboard.routes';\nimport { ChartComponent } from './chart/chart.component';\nimport { DialogComponent } from './dialog/dialog.component';\n\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        ChartComponent,\n        DialogComponent,\n    ],\n    imports: [\n        RouterModule.forChild(dashboardRoutes),\n        SharedModule,\n    ],\n    bootstrap: [DashboardComponent]\n})\nexport class DashboardModule {}\n\n","import { DashboardComponent } from './dashboard.component';\nimport { Routes } from '@angular/router';\n\n\nexport const dashboardRoutes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent,\n        pathMatch: 'full',\n    },\n];\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { BaseChartDirective, Color, Label } from 'ng2-charts';\n\n\n@Component({\n    selector: 'app-chart',\n    templateUrl: './chart.component.html',\n    styleUrls: ['./chart.component.scss'],\n})\nexport class ChartComponent implements OnInit {\n\n    @Input() data: any[] = [];\n    @Input() labels: any[] = [];\n    @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;\n\n    public lineChartType: ChartType = 'line';\n    public lineChartData: ChartDataSets[] = [];\n    public lineChartLabels: Label[] = [];\n    public lineChartOptions: (ChartOptions) = {\n        legend: {\n            display: false,\n        },\n        scales: {\n            xAxes: [{\n                display: false,\n            }],\n            yAxes: [{\n                display: false,\n            }],\n        },\n        elements: {\n            point: {\n                radius: 0,\n            },\n        },\n        tooltips: {\n            enabled: true,\n            displayColors: false,\n        },\n        responsive: false,\n    };\n\n    public lineChartColors: Color[] = [];\n\n\n    constructor() { }\n\n    ngOnInit(): void {\n        this.lineChartData = [{ data: this.data }];\n        this.lineChartLabels = this.labels;\n        if (this.data[this.data.length - 1] > 0) {\n            this.setChartPositive();\n        } else {\n            this.setChartNegative();\n        }\n    }\n\n    public chartHovered({ event, active }: { event: MouseEvent, active: {}[] }): void {\n        console.log(event, active);\n    }\n\n\n    private setChartPositive() {\n        this.lineChartColors = [\n            {\n                backgroundColor: 'rgb(125,183,129)',\n                borderColor: 'rgb(31,124,39)',\n                pointBackgroundColor: 'rgba(148,159,177,1)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n            },\n        ];\n    }\n\n    private setChartNegative() {\n        this.lineChartColors = [\n            {\n                backgroundColor: 'rgb(217,114,114)',\n                borderColor: 'rgba(227,46,46)',\n                pointBackgroundColor: 'rgba(148,159,177,1)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n            },\n        ];\n    }\n\n}\n","<canvas baseChart height=\"80\"\n        [datasets]=\"lineChartData\"\n        [labels]=\"lineChartLabels\"\n        [options]=\"lineChartOptions\"\n        [colors]=\"lineChartColors\"\n        [chartType]=\"lineChartType\"\n>\n</canvas>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TransactionService } from '../services/transaction.service';\n\n\n@Component({\n    selector: 'app-dialog',\n    templateUrl: './dialog.component.html',\n    styleUrls: ['./dialog.component.scss'],\n})\nexport class DialogComponent implements OnInit {\n    form: FormGroup;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialogRef: MatDialogRef<DialogComponent>,\n        private transactionService: TransactionService,\n    ) {}\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            asset: ['', Validators.required],\n            amountCash: ['', Validators.required],\n            currency: ['', Validators.required],\n            amountCrypto: [''],\n            date: ['', Validators.required],\n        });\n    }\n\n    isFieldInvalid(field: string) {\n        return (\n            (!this.form.get(field).valid && this.form.get(field).touched) ||\n            (this.form.get(field).untouched)\n        );\n    }\n\n\n    async onSubmit() {\n        if (this.form.valid) {\n            await this.transactionService.createTransaction(this.form.value);\n            this.dialogRef.close();\n        }\n    }\n\n}\n","<h1 mat-dialog-title>Add New Transaction</h1>\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n    <mat-form-field class=\"full-width-input\">\n        <input formControlName=\"asset\" matInput placeholder=\"Asset\">\n        <mat-error *ngIf=\"isFieldInvalid('asset')\">\n            Asset is invalid\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input\">\n        <input type=\"number\" formControlName=\"amountCash\" matInput placeholder=\"Amount Cash\">\n        <mat-error *ngIf=\"isFieldInvalid('amountCash')\">\n            Amount Cash is invalid\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input\">\n        <input formControlName=\"currency\" matInput placeholder=\"Currency\">\n        <mat-error *ngIf=\"isFieldInvalid('currency')\">\n            Currency is invalid\n        </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"full-width-input\">\n        <input type=\"number\" formControlName=\"amountCrypto\" matInput placeholder=\"Amount Crypto\">\n        <mat-error *ngIf=\"isFieldInvalid('amountCrypto')\">\n            Amount Crypto is invalid\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"full-width-input\">\n        <mat-label>Choose a date</mat-label>\n        <input matInput type=\"datetime-local\" formControlName=\"date\">\n        <mat-error *ngIf=\"isFieldInvalid('date')\">\n            Date is invalid\n        </mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"primary\">Add Transaction</button>\n</form>\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { ApiService } from '../../../core/services/api.service';\nimport { Transaction } from '../../../core/interfaces/transaction.interface';\n\n\n@Injectable({ providedIn: 'root' })\nexport class TransactionService {\n    private url = 'transactions/';\n\n    constructor(private apiService: ApiService) { }\n\n    @Output() shouldUpdate = new EventEmitter();\n\n    async loadTransactions(): Promise<Transaction[]> {\n        const transactions = await this.apiService.get(this.url).toPromise();\n        const uniqueValues = new Set<string>(transactions.map(i => i.asset));\n        const assets = await Promise.all([...uniqueValues].map(i => this.getAssetData(i)));\n        return this.transformTransactions(transactions, assets);\n    }\n\n    async createTransaction(values: any) {\n        await this.apiService.post(this.url, {\n            asset: values.asset,\n            amount_cash: values.amountCash,\n            amount_crypto: values.amountCrypto || undefined,\n            date_of_transfer: new Date(values.date).toISOString(),\n            currency: values.currency,\n        }).toPromise();\n        this.shouldUpdate.emit();\n    }\n\n    async deleteTransaction(id: number) {\n        await this.apiService.delete(`${this.url}${id}/`).toPromise();\n        this.shouldUpdate.emit();\n    }\n\n    async getAssetData(asset: string) {\n        return await this.apiService.get('yahoo/', { asset }).toPromise();\n    }\n\n    private transformTransactions(transactions, assets): Transaction[] {\n        return transactions.map(transaction => {\n            const amountCrypto = Number(transaction.amount_crypto);\n            const amountCash = Number(transaction.amount_cash);\n            const asset = assets.find(i => transaction.asset === i.chart.result[0].meta.symbol);\n            const currentValue = asset.chart.result[0].meta.regularMarketPrice * amountCrypto;\n            const timeSeries = asset.chart.result[0].indicators.quote[0].close\n                .filter(i => i)\n                .map(i => (i * amountCrypto) - amountCash);\n            return {\n                amountCash,\n                currentValue,\n                timeSeries,\n                amountCrypto,\n                id: transaction.id,\n                asset: transaction.asset,\n                profitLoss: currentValue - amountCash,\n                timeStamp: asset.chart.result[0].timestamp,\n                dateOfTransfer: transaction.date_of_transfer,\n            };\n        });\n    }\n}\n"],"sourceRoot":"webpack:///"}