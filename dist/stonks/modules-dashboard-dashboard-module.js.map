{"version":3,"sources":["./src/app/core/services/date.service.ts","./src/app/modules/dashboard/dashboard.component.html","./src/app/modules/dashboard/dashboard.component.ts","./src/app/modules/dashboard/selector/selector.component.ts","./src/app/modules/dashboard/selector/selector.component.html","./src/app/modules/dashboard/transaction/transaction.component.ts","./src/app/modules/dashboard/transaction/transaction.component.html","./src/app/modules/dashboard/dashboard.module.ts","./src/app/modules/dashboard/dashboard.routes.ts","./src/app/modules/dashboard/calendar/calendar.component.ts","./src/app/modules/dashboard/calendar/calendar.component.html","./src/app/modules/dashboard/chart/chart.component.ts","./src/app/modules/dashboard/chart/chart.component.html","./src/app/modules/dashboard/services/transaction.service.ts","./src/app/modules/dashboard/organizer/organizer.component.ts"],"names":[],"mappings":"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","file":"modules-dashboard-dashboard-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport * as moment from 'moment';\nimport { BehaviorSubject } from 'rxjs';\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DateService {\n    public date: BehaviorSubject<moment.Moment> = new BehaviorSubject(moment());\n\n    public changeMonth(dir: number): void {\n        const value = this.date.value.add(dir, 'month');\n        this.date.next(value);\n    }\n\n    public changeDate(date: moment.Moment): void {\n        const value = this.date.value.set({\n            date: date.date(),\n            month: date.month(),\n        });\n        this.date.next(value);\n    }\n}\n","<div fxFlexFill class=\"content mat\" fxLayout=\"column\">\n\n    <mat-card class=\"total-card mat-elevation-z8\" fxLayout=\"row\">\n\n        <div class=\"total\">\n            <p>Total Invested:</p>\n            <h2>{{totalInvested}}</h2>\n        </div>\n\n        <div class=\"total\">\n            <p>Current Value:</p>\n            <h2>{{totalCurrentValue | round:2}}</h2>\n        </div>\n\n        <div class=\"total\">\n            <p>Profit/Loss:</p>\n            <h2>{{lossProfit |round:2}}</h2>\n        </div>\n\n    </mat-card>\n\n    <div *ngIf=\"transactions.length > 0\" fxFlex=\"1\">\n        <table mat-table [dataSource]=\"transactions\" class=\"mat-elevation-z8\">\n            <ng-container matColumnDef=\"asset\">\n                <th mat-header-cell *matHeaderCellDef> Asset</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.asset}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amountCrypto\">\n                <th mat-header-cell *matHeaderCellDef> Amount Crypto</th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.amountCrypto}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"amountCash\">\n                <th mat-header-cell *matHeaderCellDef> Amount Currency </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.amountCash | round:2}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"date\">\n                <th mat-header-cell *matHeaderCellDef> Date </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.dateOfTransfer | date: \"YYYY-MM-dd\"}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"current\">\n                <th mat-header-cell *matHeaderCellDef> Current Value </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.currentValue | round:2}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"profitloss\">\n                <th mat-header-cell *matHeaderCellDef> Profit/Loss </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.profitLoss | round:2}}</td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"graph\">\n                <th mat-header-cell *matHeaderCellDef> Graph</th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <app-chart [data]=\"element.timeSeries\" [labels]=\"element.timeStamp\"></app-chart>\n                </td>\n            </ng-container>\n\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n    </div>\n\n\n</div>\n\n\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { TransactionService } from './services/transaction.service';\nimport { Transaction } from '../../core/interfaces/transaction.interface';\n\n\n@Component({\n    selector: 'app-dashboard',\n    templateUrl: './dashboard.component.html',\n    styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n\n    displayedColumns: string[] = ['asset', 'amountCash', 'amountCrypto', 'date', 'current', 'profitloss', 'graph'];\n    transactions: Transaction[] = [];\n    totalInvested = 0;\n    totalCurrentValue = 0;\n    lossProfit = 0;\n\n    constructor(private transactionService: TransactionService) { }\n\n    ngOnInit(): void {\n        this.transactionService\n            .loadTransactions()\n            .subscribe((response: Transaction[]) => this.setTransactions(response));\n    }\n\n    private setTransactions(transactions: Transaction[]) {\n        if (transactions) {\n            this.transactions = transactions;\n            this.totalInvested = 0;\n            this.totalCurrentValue = 0;\n            this.lossProfit = 0;\n            transactions.forEach((i) => {\n                    this.totalInvested += i.amountCash;\n                    this.totalCurrentValue += i.currentValue;\n                    this.lossProfit += i.currentValue - i.amountCash;\n                },\n            );\n        }\n    }\n}\n\n","import { Component } from '@angular/core';\nimport { DateService } from '../../../core/services/date.service';\n\n\n@Component({\n    selector: 'app-selector',\n    templateUrl: './selector.component.html',\n    styleUrls: ['./selector.component.scss'],\n})\nexport class SelectorComponent {\n\n    constructor(public dateService: DateService) { }\n\n    public go(dir: number): void {\n        this.dateService.changeMonth(dir);\n    }\n\n}\n","<p>\n    <i (click)=\"go(-1)\" class=\"material-icons\">arrow_left</i>\n\n    <span>{{ dateService.date | async | moment }}</span>\n\n    <i (click)=\"go(1)\" class=\"material-icons\">arrow_right</i>\n</p>\n","import { Component, Input, OnInit } from '@angular/core';\n\n\n@Component({\n    selector: 'app-transaction',\n    templateUrl: './transaction.component.html',\n    styleUrls: ['./transaction.component.scss'],\n})\nexport class TransactionComponent implements OnInit {\n\n    @Input() asset: string;\n    @Input() amoutCash: number;\n    @Input() amoutCrypto: number;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n}\n","<div class=\"transaction-card\">\n    <p>Asset: {{ asset }}</p>\n    <p>Amount Cash: {{ amoutCash }}</p>\n    <p>Amount Crypto: {{ amoutCrypto | round:3 }}</p>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CalendarComponent } from './calendar/calendar.component';\nimport { OrganizerComponent } from './organizer/organizer.component';\nimport { SelectorComponent } from './selector/selector.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { TransactionComponent } from './transaction/transaction.component';\nimport { DashboardComponent } from './dashboard.component';\nimport { RouterModule } from '@angular/router';\nimport { dashboardRoutes } from './dashboard.routes';\nimport { ChartComponent } from './chart/chart.component';\n\n\n@NgModule({\n    declarations: [\n        CalendarComponent,\n        OrganizerComponent,\n        SelectorComponent,\n        TransactionComponent,\n        DashboardComponent,\n        ChartComponent,\n    ],\n    imports: [\n        RouterModule.forChild(dashboardRoutes),\n        SharedModule,\n    ],\n    bootstrap: [DashboardComponent]\n})\nexport class DashboardModule {}\n\n","import { DashboardComponent } from './dashboard.component';\nimport { Routes } from '@angular/router';\n\n\nexport const dashboardRoutes: Routes = [\n    {\n        path: '',\n        component: DashboardComponent,\n        pathMatch: 'full',\n    },\n];\n","import { Component, OnInit } from '@angular/core';\nimport * as moment from 'moment';\nimport { DateService } from '../../../core/services/date.service';\n\n\ninterface Day {\n    value: moment.Moment;\n    active: boolean;\n    disabled: boolean;\n    selected: boolean;\n}\n\n\ninterface Week {\n    days: Day[];\n}\n\n\n@Component({\n    selector: 'app-calendar',\n    templateUrl: './calendar.component.html',\n    styleUrls: ['./calendar.component.scss'],\n})\nexport class CalendarComponent implements OnInit {\n\n    calendar: Week[];\n\n    constructor(private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.dateService.date.subscribe(this.generate.bind(this));\n    }\n\n    public generate(now: moment.Moment): void {\n        const startDay = now.clone().startOf('month').startOf('week');\n        const endDay = now.clone().endOf('month').endOf('week');\n\n        const date = startDay.clone().subtract(1, 'day');\n        const calendar: Week[] = [];\n        while ( date.isBefore(endDay, 'day') ) {\n            calendar.push({\n                days: Array(7)\n                    .fill(0)\n                    .map(() => {\n                        const value = date.add(1, 'day').clone();\n                        const active = moment().isSame(value, 'date');\n                        const disabled = !now.isSame(value, 'month');\n                        const selected = now.isSame(value, 'date');\n                        return {\n                            value, active, disabled, selected,\n                        };\n                    }),\n            });\n        }\n        this.calendar = calendar;\n    }\n\n\n    public select(day: moment.Moment): void {\n        this.dateService.changeDate(day);\n    }\n}\n","<table>\n    <thead>\n    <tr>\n        <th>Sun</th>\n        <th>Mon</th>\n        <th>Tue</th>\n        <th>Wed</th>\n        <th>Thu</th>\n        <th>Fri</th>\n        <th>Sat</th>\n    </tr>\n    </thead>\n\n    <tbody>\n    <tr *ngFor=\"let week of calendar\">\n        <td\n            (click)=\"select(day.value)\"\n            *ngFor=\"let day of week.days\"\n            [class.disabled]=\"day.disabled\"\n        >\n            <span\n                [class.active]=\"day.active\"\n                [class.selected]=\"day.selected\"\n            >\n                {{ day.value | moment:'ddd DD' }}\n            </span>\n        </td>\n    </tr>\n    </tbody>\n</table>\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { ChartDataSets, ChartOptions, ChartType } from 'chart.js';\nimport { BaseChartDirective, Color, Label } from 'ng2-charts';\n\n\n@Component({\n    selector: 'app-chart',\n    templateUrl: './chart.component.html',\n    styleUrls: ['./chart.component.scss'],\n})\nexport class ChartComponent implements OnInit {\n\n    @Input() data: any[] = [];\n    @Input() labels: any[] = [];\n    @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;\n\n    public lineChartType: ChartType = 'line';\n    public lineChartData: ChartDataSets[] = [];\n    public lineChartLabels: Label[] = [];\n    public lineChartOptions: (ChartOptions) = {\n        legend: {\n            display: false,\n        },\n        scales: {\n            xAxes: [{\n                display: false,\n            }],\n            yAxes: [{\n                display: false,\n            }],\n        },\n        elements: {\n            point: {\n                radius: 0,\n            },\n        },\n        tooltips: {\n            enabled: true,\n            displayColors: false,\n        },\n        responsive: false,\n    };\n\n    public lineChartColors: Color[] = [];\n\n\n    constructor() { }\n\n    ngOnInit(): void {\n        this.lineChartData = [{ data: this.data }];\n        this.lineChartLabels = this.labels;\n        if (this.data[this.data.length - 1] > 0) {\n            this.setChartPositive();\n        } else {\n            this.setChartNegative();\n        }\n    }\n\n    public chartHovered({ event, active }: { event: MouseEvent, active: {}[] }): void {\n        console.log(event, active);\n    }\n\n\n    private setChartPositive() {\n        this.lineChartColors = [\n            {\n                backgroundColor: 'rgb(125,183,129)',\n                borderColor: 'rgb(31,124,39)',\n                pointBackgroundColor: 'rgba(148,159,177,1)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n            },\n        ];\n    }\n\n    private setChartNegative() {\n        this.lineChartColors = [\n            {\n                backgroundColor: 'rgb(217,114,114)',\n                borderColor: 'rgba(227,46,46)',\n                pointBackgroundColor: 'rgba(148,159,177,1)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n            },\n        ];\n    }\n\n}\n","<canvas baseChart height=\"80\"\n        [datasets]=\"lineChartData\"\n        [labels]=\"lineChartLabels\"\n        [options]=\"lineChartOptions\"\n        [colors]=\"lineChartColors\"\n        [chartType]=\"lineChartType\"\n>\n</canvas>\n","import { Injectable } from '@angular/core';\nimport { map, switchMap } from 'rxjs/operators';\nimport { forkJoin, Observable } from 'rxjs';\nimport { ApiService } from '../../../core/services/api.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class TransactionService {\n    private url = 'transactions/';\n\n    constructor(private apiService: ApiService) {\n        this.loadTransactions();\n    }\n\n    loadTransactions(): Observable<any> {\n        return this.apiService\n            .get(this.url)\n            .pipe(\n                switchMap((dat: any[]) => forkJoin(dat.map(i => this.getAssetData(i)))),\n            );\n    }\n\n    getAssetData(asset: any) {\n        return this.apiService\n            .get('yahoo/', { asset: asset.asset })\n            .pipe(\n                map((response: any) => {\n\n                    const amountCrypto = Number(asset.amount_crypto);\n                    const amountCash = Number(asset.amount_cash);\n                    const currentValue = response.chart.result[0].meta.regularMarketPrice * amountCrypto;\n                    const profitLoss = currentValue - amountCash;\n                    const timeSeries = response.chart.result[0].indicators.quote[0].close\n                        .filter(i => i).map(i => (i * amountCrypto) - amountCash);\n\n                    return {\n                        amountCrypto,\n                        amountCash,\n                        currentValue,\n                        profitLoss,\n                        timeSeries,\n                        asset: asset.asset,\n                        dateOfTransfer: asset.date_of_transfer,\n                        timeStamp: response.chart.result[0].timestamp,\n                    };\n                }),\n            );\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { DateService } from '../../../core/services/date.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {  TransactionService } from '../services/transaction.service';\n\n\n@Component({\n    selector: 'app-organizer',\n    templateUrl: './organizer.component.html',\n    styleUrls: ['./organizer.component.scss'],\n})\nexport class OrganizerComponent implements OnInit {\n\n    form: FormGroup;\n\n    constructor(public dateService: DateService,\n                public transactionService: TransactionService) { }\n\n    ngOnInit(): void {\n        // this.dateService.date\n        //     .pipe(\n        //         switchMap(value => this.transactionService.load(value)),\n        //     )\n        //     .subscribe(transactions => {\n        //         this.transactions = transactions;\n        //     });\n        //\n        this.form = new FormGroup({\n            title: new FormControl('', Validators.required),\n            amount: new FormControl(0, [\n                Validators.required,\n                Validators.min(0.01),\n                Validators.pattern('^[0-9]*$'),\n            ]),\n        });\n    }\n\n    // submit(): void {\n    //     const { title, amount } = this.form.value;\n    //     const transaction: Transaction = {\n    //         title,\n    //         amount,\n    //         date: this.dateService.date.value.format('DD-MM-YYYY'),\n    //     };\n    //     this.transactionService.create(transaction).subscribe(resp => {\n    //         this.transactions.push(resp);\n    //         this.form.reset();\n    //     }, error => {console.log(error); });\n    // }\n    //\n    // remove(transaction: Transaction): void {\n    //     this.transactionService.remove(transaction).subscribe(() => {\n    //         this.transactions = this.transactions.filter(t => t.id !== transaction.id);\n    //     }, error => {console.log(error); });\n    // }\n\n}\n\n"],"sourceRoot":"webpack:///"}